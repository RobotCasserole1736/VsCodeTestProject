plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
    id 'org.hidetake.ssh' version '2.9.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

def ROBOT_CLASS = "frc.robot.Robot"


remotes {
  roboRIO {
    role 'roboRIO'
    host = '10.17.36.2'
    user = 'lvuser'
    knownHosts = allowAnyHosts
    timeoutSec=8
    retryCount=3
    retryWaitSec=1
  }
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()

            //webserver deploy
            ssh.run {
                session(remotes.roboRIO) {
                    put from: './resources', into: '/home/lvuser/resources/'
                }
            }
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}


// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()

    //Casserole WebServer Deps
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-servlet', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-common', version: '9.3.9.v20160517'
    compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.3.9.v20160517'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
}


// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

// Force Java 8 Compatibility mode for deployed code, in case the develoment
// system is using Java 10.
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

wrapper {
    gradleVersion = '4.9'
}

////Configure websocket test
//sourceSets {
//    websocketTest {
//        compileClasspath += sourceSets.main.output
//        runtimeClasspath += sourceSets.main.output
//    }
//}
//
//configurations {
//    websocketTestImplementation.extendsFrom implementation
//    websocketTestRuntimeOnly.extendsFrom runtimeOnly
//}
//
//task websocketTest(type: Test){
//    description = 'Runs local interactive webserver test.'
//
//    testClassesDirs = sourceSets.websocketTest.output.classesDirs
//    classpath = sourceSets.websocketTest.runtimeClasspath
//
//}